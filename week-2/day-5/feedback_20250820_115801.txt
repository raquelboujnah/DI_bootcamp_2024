URL: https://github.com/raquelboujnah/DI_bootcamp_2024/blob/main/week-2/day-5/mini_project.py
suggestions for improvement:
- **Improve Input Validation:** In the `player_turn()` function, enhance input validation. Currently, it only checks if a spot is already taken. Add `try-except` blocks around `int(input(...))` to handle `ValueError` if the user enters non-numeric input. Crucially, also validate that the entered `row` and `column` numbers are within the valid range (1, 2, or 3) to prevent `IndexError` when accessing `list_board`.
- **Separate Tie Check Function:** As per 'Step 5' in the instructions, create a distinct function (e.g., `check_tie(board)`) specifically for checking if the game has resulted in a tie. This adheres to the Single Responsibility Principle and makes the code's logic clearer than combining it within `check_win()`.
- **Correct Tie Check Logic:** The current tie-checking logic within `check_win()` is flawed. The `else: break` within the inner loop means it will only count non-empty cells in a row if the entire row is filled; it won't correctly determine if the entire board is full. A more robust way to check if all cells are filled is to iterate through all 9 cells, or use `all(cell != ' ' for row in board for cell in row)`.
- **Improve Board Display Format:** The `make_board()` function (which should be renamed `display_board()` as per 'Step 2') can be improved to visually represent the 3x3 grid more clearly, aligning with typical Tic Tac Toe aesthetics. For example, horizontal separators like `---|---|---` should be placed *between* the rows of game marks, not before the first and after the last data row.
- **Manage Board State Locally:** Instead of using `list_board` as a global variable, initialize it within the `play()` function and pass it as an argument to relevant functions (`make_board`, `player_turn`, `check_win`, `check_tie`). This improves modularity, testability, and prevents unintended side effects from global state manipulation.
- **Remove Unused Variable:** The global `count = 0` variable is declared but never used in the program. It can be safely removed.
- **Refine `player_turn` Functionality:** It's generally better practice to separate concerns. The `player_turn` function currently calls `make_board()`. The instruction 'Step 6' implies that `display_board()` should be called in the main game loop before getting input for the turn, rather than inside the input function itself. Also, the `else` block after the `while` loop in `player_turn` is unusual; the line `list_board[row -1][column -1] = player` can simply be placed directly after the `while` loop completes.
- **Remove Duplicate `welcome()` Call:** The `welcome()` function is called once globally at the start of the script and again inside `play()`. One of these calls is redundant and can be removed.
- **Clearer End Game Message:** The `play()` function currently relies on `check_win()` printing the result. It would be clearer to the user if the `play()` function explicitly printed whether the game ended in a win or a tie after the loop breaks, based on the distinct return values of `check_win()` and `check_tie()` (once implemented separately).
Brief justification:
- correctness: The code accurately implements the core mechanics of Tic Tac Toe, including board representation (Step 1), checking for win conditions (Step 4), and a functional game loop (Step 6) that switches players. However, it falls short on robust input validation (Step 3), which can lead to program crashes with invalid user input (e.g., non-numbers or out-of-range numbers). The tie-checking logic (Step 5) is partially implemented within `check_win()` but is flawed and not provided as a separate function as explicitly instructed. The board display (Step 2) is functional but could be visually improved.
- readability: The code uses clear and descriptive function and variable names, making the overall flow of the game understandable. However, the use of a global `list_board` variable, the inclusion of an unused `count` variable, the slightly unconventional `while-else` construct, and the lack of comments for more complex logic (like the win/tie check) moderately reduce its readability. The board's visual presentation could also be enhanced for better clarity.
- performance: For a game of Tic Tac Toe, performance is not a limiting factor, and the provided code is highly efficient. The board is a small 3x3 grid, and all operations (list accesses, fixed-loop iterations for win checks) are constant time or involve a very small number of operations. There are no obvious bottlenecks or inefficient algorithms for this scale.
- security: In the context of a simple command-line game, the primary security concern relates to input handling robustness. The code directly converts user input to integers using `int()`. If a user enters non-numeric input, a `ValueError` will be raised, causing the program to crash. While not a typical 'security vulnerability' like SQL injection, it's a common robustness issue that could be exploited to terminate the program, warranting improvement through error handling (e.g., `try-except` blocks).

