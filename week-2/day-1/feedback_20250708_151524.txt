URL: https://github.com/raquelboujnah/DI_bootcamp_2024/blob/main/week-2/day-1/xp-exercise.py
suggestions for improvement:
- Exercise 1: Use a more efficient way to print the string multiple times without explicitly repeating the print statement. Consider using string multiplication.
- Exercise 3: The predicted outputs for the comparison operations are partly incorrect.  Check your Boolean logic. The type comparisons are crucial here.
- Exercise 4: The `f-string` syntax in the print statement is incorrect. It should correctly embed the `computer_brand` variable value.
- Exercise 5: The `info` variable's string formatting is incorrect. Use f-strings or other string formatting methods correctly.
- Exercise 6: The condition `if a - b:` is not the correct way to check if `a` is greater than `b`. Use the greater than operator (>).
- Exercise 7: There's a syntax error in the `if` statement condition (`user_number % 2 = 0`). Use the correct equality operator (`==`).
- Exercise 8:  There's a syntax error in the `if` statement condition. Use the correct equality operator (`==`).  Case sensitivity is also a factor.
- Exercise 9: There's a syntax error in the `if` statement condition. Use the correct equality operator (`==`).  The instructions say to use centimeters, but the prompt asks for height in inches. Fix the inconsistency and correctly compare with 145 cm.
Brief justification:
- correctness: Most exercises demonstrate a basic understanding of the concepts introduced (print statements, variables, mathematical operations, comparison operators, if statements, and user input). However, several exercises contain errors in syntax and logic which reduce the correctness score.  The exercises directly address the chapter's learning objectives, but their implementation contains flaws.
- readability: The code's readability is hampered by syntax errors and inefficient code. The variable names are reasonably descriptive in most cases.  The lack of comments also negatively impacts readability.
- performance: The performance of the provided code is generally acceptable for such small programs.  There is room for improvement in efficiency in some of the exercises, but there are no major performance bottlenecks in the current implementation.
- security: The code does not present any security vulnerabilities because it's limited in scope and does not interact with any external resources or handle user input in a way that would expose a system to risks.

