URL: https://github.com/raquelboujnah/DI_bootcamp_2024/blob/main/week-2/day-4/xp_exercise.py
suggestions for improvement:
- **General:** Many exercises contain fundamental syntax errors (e.g., assignment vs. comparison operators, unclosed strings, incorrect parameter definitions) that prevent the code from running.
- **General:** Variables used in function calls (e.g., `favorite_book(title)`, `number(user_number)`) are often undefined in the global scope, causing `NameError`.
- **General:** Pay close attention to function parameters. Several functions are defined without parameters but are expected to take them, or vice-versa (e.g., `show_magicians()` and `make_great()` should take `magician_names` as a parameter).
- **Exercise 1:** Call the `display_message()` function.
- **Exercise 2:** When calling `favorite_book()`, provide a string literal as an argument, e.g., `favorite_book("The Hobbit")`.
- **Exercise 3:** Correct the function definition for `describe_city()` to `def describe_city(city, country="Unknown"):` (using 'Unknown' as per prompt, and proper default parameter syntax). Also, fix the typo `contry` to `country` inside the print statement. Call the function as specified in the examples (e.g., `describe_city("Reykjavik", "Iceland")` and `describe_city("Paris")`).
- **Exercise 4:** Correct the assignment operator (`=`) in `random_number = random.randint(1, 100)` and the comparison operator (`==`) in `if user_number == random_number:`. Ensure you define `user_number` with a concrete value when calling the function (e.g., `number(50)`).
- **Exercise 5:** Correct the syntax error in the function definition: `def make_shirt(size, text):`. Implement the default values as `def make_shirt(size="large", text="I love Python"):` before calling it with default and custom arguments. Demonstrate keyword arguments explicitly as `make_shirt(size="small", text="Hello!")`.
- **Exercise 6:** The `show_magicians()` and `make_great()` functions should accept the `magician_names` list as a parameter (e.g., `def show_magicians(magicians):`). In `make_great()`, you need to *modify* the list elements in place, not just print: `magicians[i] = magicians[i] + " the Great"` (using a loop with index) or by creating a new list. Call `show_magicians(magician_names)` after `make_great(magician_names)`.
- **Exercise 7:** Address the logical errors in the `main()` function's `elif` conditions (e.g., `0 <= random_temp <= 16`). Ensure `get_random_temp` handles cases where the input `season` (month) might not fall within the defined ranges. Consider adding input validation for the user's month input (e.g., `try-except` block for `int()`). Re-evaluate the month-to-temperature range mapping for better seasonal accuracy (e.g., months 11-12 typically being colder, not hotter).
- **Exercise 8:** Fix the syntax error `user_answer ! quiz["answer"]` to `user_answer != quiz["answer"]`. Correct the increment `wrong_answer + 1` to `wrong_answer += 1`. Crucially, `question_user()` must *return* the collected results (correct count, incorrect count, `wrong_answer_list`) and `quiz_result()` must *accept these as parameters*. The recursive calls in `quiz_result()` for playing again are not ideal; a `while` loop in a main game function would be more robust for controlling game flow and preventing stack overflow.
- **Unrelated Code:** The 'Sandwich Orders' section is not part of the described exercises. If it were, it also contains multiple logical and syntax errors (e.g., `while "Pastrami sandwich":`, `.add()` on a list, missing concatenation in `print`). Remove this section or confirm it's part of a different exercise.
Brief justification:
- correctness: The correctness score is low (10%) because the provided code contains numerous fundamental syntax errors (e.g., incorrect operators, unclosed string literals, invalid parameter definitions) that prevent most of the functions from running successfully. Beyond syntax, there are significant logical errors (e.g., functions not taking or returning required parameters, incorrect list modification logic, flawed conditional checks, undefined variables in scope) that prevent the code from fulfilling the explicit requirements outlined in the Chapter Content/Questions. The final section (Sandwich Orders) is entirely irrelevant to the provided chapter content, thus contributing 0% to the correctness in this context.
- readability: The readability score is moderate (50%). While variable names are generally clear and indentation is mostly consistent, the pervasive syntax and logical errors severely impede the ability to understand the intended flow and purpose of the code without extensive debugging. The comments are present but sometimes misaligned with the exercise numbers (e.g., 'exercise 2' for 'Exercise 1').
- performance: The performance score is high (80%) because for the scale of problems presented, there are no inherent algorithmic inefficiencies or operations that would significantly impact performance. The issues are primarily in correctness and functionality rather than execution speed. Deductions are minor as some logic errors might lead to unexpected behavior but not performance bottlenecks (e.g., infinite loop in sandwich code, which is unrelated to chapter).
- security: The security score is high (80%) as the code primarily involves basic function definitions and I/O operations for learning purposes. There are no direct interactions with external systems, file operations (beyond standard library imports), or complex parsing of untrusted user input that would introduce significant security vulnerabilities in this context. Potential minor issues like unvalidated integer conversion for user input are common in introductory exercises and not critical security flaws for standalone scripts.

