URL: https://github.com/raquelboujnah/DI_bootcamp_2024/blob/main/week-3/day-2/exercise_xp.py
suggestions for improvement:
- **Complete Exercise 3:** The code for Exercise 3 is entirely missing. Please implement the `PetDog` class according to the instructions, including inheritance from `Dog`, the `trained` attribute, and the `train()`, `play(*args)`, and `do_a_trick()` methods. Remember to handle the `random` module import for `do_a_trick()`.
- **Correct `fight()` method logic in Exercise 2:** The `fight()` method currently determines the winner based only on `run_speed()`. It should use the product of `run_speed() * weight` for both dogs as specified in the instructions. Additionally, the method should *return* a string stating the winner, rather than printing it directly.
- **Explicitly Test `run_speed()` in Exercise 2:** Although `run_speed()` is used internally by `fight()`, the instructions ask to 'Test Dog Methods'. It would be good practice to explicitly call and print the result of `run_speed()` for at least one dog instance to demonstrate its functionality.
- **Refine `family_presentation()` in Exercise 4:** The `family_presentation()` method currently prints the `last_name` twice for each member (e.g., `first_name last_name, age`). The instruction asks to print 'each family memberâ€™s first name and age'. While functional, you could modify it to only print `first_name, age` to more strictly adhere to the prompt's wording, avoiding redundant `last_name` printing for each individual member.
Brief justification:
- correctness: Exercise 1 is correctly implemented, adhering to all instructions regarding inheritance, class instantiation, list creation, and method calls. Exercise 2 partially meets the requirements: the `fight()` method's winning logic is incorrect (uses `run_speed` instead of `run_speed * weight`) and it prints instead of returns a string. Also, `run_speed()` is not directly tested. Exercise 3 is completely absent from the provided code, significantly impacting the overall correctness score. Exercise 4 is largely correct, with only a minor deviation in the output format of the `family_presentation()` method.
- readability: The code uses clear and descriptive class, method, and variable names. It is well-formatted with consistent indentation throughout. Comments clearly separate each exercise, making the structure easy to understand. The logic within methods is straightforward and easy to follow.
- performance: For the scope of these exercises, performance is not a critical concern. The operations involve small collections of objects and simple calculations. Loops are minimal and efficient for the given data sizes. No performance bottlenecks are apparent.
- security: The code does not handle external input, interact with files, databases, or networks, nor does it perform any operations that could introduce common security vulnerabilities. It is purely logic-based and focuses on object-oriented programming concepts.

